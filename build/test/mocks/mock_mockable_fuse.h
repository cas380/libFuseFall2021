/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MOCKABLE_FUSE_H
#define _MOCK_MOCKABLE_FUSE_H

#include "unity.h"
#include "mockable_fuse.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_mockable_fuse_Init(void);
void mock_mockable_fuse_Destroy(void);
void mock_mockable_fuse_Verify(void);




#define fuse_get_context_IgnoreAndReturn(cmock_retval) fuse_get_context_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void fuse_get_context_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct fuse_context* cmock_to_return);
#define fuse_get_context_StopIgnore() fuse_get_context_CMockStopIgnore()
void fuse_get_context_CMockStopIgnore(void);
#define fuse_get_context_ExpectAndReturn(cmock_retval) fuse_get_context_CMockExpectAndReturn(__LINE__, cmock_retval)
void fuse_get_context_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct fuse_context* cmock_to_return);
#define truncate_IgnoreAndReturn(cmock_retval) truncate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void truncate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define truncate_StopIgnore() truncate_CMockStopIgnore()
void truncate_CMockStopIgnore(void);
#define truncate_ExpectAnyArgsAndReturn(cmock_retval) truncate_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void truncate_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define truncate_ExpectAndReturn(path, length, cmock_retval) truncate_CMockExpectAndReturn(__LINE__, path, length, cmock_retval)
void truncate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* path, off_t length, int cmock_to_return);
#define unlink_IgnoreAndReturn(cmock_retval) unlink_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void unlink_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define unlink_StopIgnore() unlink_CMockStopIgnore()
void unlink_CMockStopIgnore(void);
#define unlink_ExpectAnyArgsAndReturn(cmock_retval) unlink_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void unlink_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define unlink_ExpectAndReturn(pathname, cmock_retval) unlink_CMockExpectAndReturn(__LINE__, pathname, cmock_retval)
void unlink_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pathname, int cmock_to_return);
#define rmdir_IgnoreAndReturn(cmock_retval) rmdir_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void rmdir_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define rmdir_StopIgnore() rmdir_CMockStopIgnore()
void rmdir_CMockStopIgnore(void);
#define rmdir_ExpectAnyArgsAndReturn(cmock_retval) rmdir_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void rmdir_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define rmdir_ExpectAndReturn(pathname, cmock_retval) rmdir_CMockExpectAndReturn(__LINE__, pathname, cmock_retval)
void rmdir_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pathname, int cmock_to_return);
#define link_IgnoreAndReturn(cmock_retval) link_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void link_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define link_StopIgnore() link_CMockStopIgnore()
void link_CMockStopIgnore(void);
#define link_ExpectAnyArgsAndReturn(cmock_retval) link_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void link_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define link_ExpectAndReturn(oldpath, newpath, cmock_retval) link_CMockExpectAndReturn(__LINE__, oldpath, newpath, cmock_retval)
void link_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* oldpath, const char* newpath, int cmock_to_return);
#define symlink_IgnoreAndReturn(cmock_retval) symlink_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void symlink_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define symlink_StopIgnore() symlink_CMockStopIgnore()
void symlink_CMockStopIgnore(void);
#define symlink_ExpectAnyArgsAndReturn(cmock_retval) symlink_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void symlink_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define symlink_ExpectAndReturn(oldpath, newpath, cmock_retval) symlink_CMockExpectAndReturn(__LINE__, oldpath, newpath, cmock_retval)
void symlink_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* oldpath, const char* newpath, int cmock_to_return);
#define mknod_IgnoreAndReturn(cmock_retval) mknod_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mknod_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mknod_StopIgnore() mknod_CMockStopIgnore()
void mknod_CMockStopIgnore(void);
#define mknod_ExpectAnyArgsAndReturn(cmock_retval) mknod_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mknod_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mknod_ExpectAndReturn(pathname, mode, dev, cmock_retval) mknod_CMockExpectAndReturn(__LINE__, pathname, mode, dev, cmock_retval)
void mknod_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pathname, mode_t mode, dev_t dev, int cmock_to_return);
#define mkdir_IgnoreAndReturn(cmock_retval) mkdir_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mkdir_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mkdir_StopIgnore() mkdir_CMockStopIgnore()
void mkdir_CMockStopIgnore(void);
#define mkdir_ExpectAnyArgsAndReturn(cmock_retval) mkdir_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mkdir_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mkdir_ExpectAndReturn(pathname, mode, cmock_retval) mkdir_CMockExpectAndReturn(__LINE__, pathname, mode, cmock_retval)
void mkdir_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pathname, mode_t mode, int cmock_to_return);
#define pwrite_IgnoreAndReturn(cmock_retval) pwrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pwrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ssize_t cmock_to_return);
#define pwrite_StopIgnore() pwrite_CMockStopIgnore()
void pwrite_CMockStopIgnore(void);
#define pwrite_ExpectAnyArgsAndReturn(cmock_retval) pwrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pwrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ssize_t cmock_to_return);
#define pwrite_ExpectAndReturn(fd, buf, count, offset, cmock_retval) pwrite_CMockExpectAndReturn(__LINE__, fd, buf, count, offset, cmock_retval)
void pwrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int fd, const void* buf, size_t count, off_t offset, ssize_t cmock_to_return);
#define pread_IgnoreAndReturn(cmock_retval) pread_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pread_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ssize_t cmock_to_return);
#define pread_StopIgnore() pread_CMockStopIgnore()
void pread_CMockStopIgnore(void);
#define pread_ExpectAnyArgsAndReturn(cmock_retval) pread_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pread_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ssize_t cmock_to_return);
#define pread_ExpectAndReturn(fd, buf, count, offset, cmock_retval) pread_CMockExpectAndReturn(__LINE__, fd, buf, count, offset, cmock_retval)
void pread_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int fd, void* buf, size_t count, off_t offset, ssize_t cmock_to_return);
#define pread_ReturnThruPtr_buf(buf) pread_CMockReturnMemThruPtr_buf(__LINE__, buf, sizeof(void))
#define pread_ReturnArrayThruPtr_buf(buf, cmock_len) pread_CMockReturnMemThruPtr_buf(__LINE__, buf, cmock_len * sizeof(*buf))
#define pread_ReturnMemThruPtr_buf(buf, cmock_size) pread_CMockReturnMemThruPtr_buf(__LINE__, buf, cmock_size)
void pread_CMockReturnMemThruPtr_buf(UNITY_LINE_TYPE cmock_line, void* buf, size_t cmock_size);
#define write_IgnoreAndReturn(cmock_retval) write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ssize_t cmock_to_return);
#define write_StopIgnore() write_CMockStopIgnore()
void write_CMockStopIgnore(void);
#define write_ExpectAnyArgsAndReturn(cmock_retval) write_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void write_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, ssize_t cmock_to_return);
#define write_ExpectAndReturn(fd, buf, count, cmock_retval) write_CMockExpectAndReturn(__LINE__, fd, buf, count, cmock_retval)
void write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int fd, const void* buf, size_t count, ssize_t cmock_to_return);
#define chown_IgnoreAndReturn(cmock_retval) chown_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void chown_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define chown_StopIgnore() chown_CMockStopIgnore()
void chown_CMockStopIgnore(void);
#define chown_ExpectAnyArgsAndReturn(cmock_retval) chown_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void chown_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define chown_ExpectAndReturn(path, owner, group, cmock_retval) chown_CMockExpectAndReturn(__LINE__, path, owner, group, cmock_retval)
void chown_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* path, uid_t owner, gid_t group, int cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
