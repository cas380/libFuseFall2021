/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_USER_LOCKS_H
#define _MOCK_USER_LOCKS_H

#include "unity.h"
#include "user_locks.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_user_locks_Init(void);
void mock_user_locks_Destroy(void);
void mock_user_locks_Verify(void);




#define init_user_locks_IgnoreAndReturn(cmock_retval) init_user_locks_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void init_user_locks_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define init_user_locks_StopIgnore() init_user_locks_CMockStopIgnore()
void init_user_locks_CMockStopIgnore(void);
#define init_user_locks_ExpectAnyArgsAndReturn(cmock_retval) init_user_locks_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void init_user_locks_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define init_user_locks_ExpectAndReturn(uid_arr, cmock_retval) init_user_locks_CMockExpectAndReturn(__LINE__, uid_arr, cmock_retval)
void init_user_locks_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uid_t* uid_arr, int cmock_to_return);
#define init_user_locks_ReturnThruPtr_uid_arr(uid_arr) init_user_locks_CMockReturnMemThruPtr_uid_arr(__LINE__, uid_arr, sizeof(uid_t))
#define init_user_locks_ReturnArrayThruPtr_uid_arr(uid_arr, cmock_len) init_user_locks_CMockReturnMemThruPtr_uid_arr(__LINE__, uid_arr, cmock_len * sizeof(*uid_arr))
#define init_user_locks_ReturnMemThruPtr_uid_arr(uid_arr, cmock_size) init_user_locks_CMockReturnMemThruPtr_uid_arr(__LINE__, uid_arr, cmock_size)
void init_user_locks_CMockReturnMemThruPtr_uid_arr(UNITY_LINE_TYPE cmock_line, uid_t* uid_arr, size_t cmock_size);
#define destroy_user_locks_Ignore() destroy_user_locks_CMockIgnore()
void destroy_user_locks_CMockIgnore(void);
#define destroy_user_locks_StopIgnore() destroy_user_locks_CMockStopIgnore()
void destroy_user_locks_CMockStopIgnore(void);
#define destroy_user_locks_Expect() destroy_user_locks_CMockExpect(__LINE__)
void destroy_user_locks_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define lock_user_mutex_IgnoreAndReturn(cmock_retval) lock_user_mutex_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lock_user_mutex_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define lock_user_mutex_StopIgnore() lock_user_mutex_CMockStopIgnore()
void lock_user_mutex_CMockStopIgnore(void);
#define lock_user_mutex_ExpectAnyArgsAndReturn(cmock_retval) lock_user_mutex_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lock_user_mutex_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define lock_user_mutex_ExpectAndReturn(uid, cmock_retval) lock_user_mutex_CMockExpectAndReturn(__LINE__, uid, cmock_retval)
void lock_user_mutex_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uid_t uid, int cmock_to_return);
#define unlock_user_mutex_IgnoreAndReturn(cmock_retval) unlock_user_mutex_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void unlock_user_mutex_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define unlock_user_mutex_StopIgnore() unlock_user_mutex_CMockStopIgnore()
void unlock_user_mutex_CMockStopIgnore(void);
#define unlock_user_mutex_ExpectAnyArgsAndReturn(cmock_retval) unlock_user_mutex_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void unlock_user_mutex_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define unlock_user_mutex_ExpectAndReturn(uid, cmock_retval) unlock_user_mutex_CMockExpectAndReturn(__LINE__, uid, cmock_retval)
void unlock_user_mutex_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uid_t uid, int cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
